#!/usr/bin/env python3
"""
Configurador Autom√°tico del Extractor GitHub-Slack
==================================================

Este script configura autom√°ticamente el entorno para usar
el extractor de commits de GitHub desde JSON de Slack.
"""

import subprocess
import sys
import os
from pathlib import Path

def verificar_python():
    """Verifica la versi√≥n de Python"""
    version = sys.version_info
    if version.major == 3 and version.minor >= 12:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - Compatible (3.12+)")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - Requiere Python 3.12+")
        print("üí° Descarga Python 3.12 desde https://www.python.org/downloads/")
        return False

def instalar_dependencias():
    """Instala las dependencias necesarias"""
    print("üì¶ Actualizando pip, setuptools y wheel...")
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip', 'setuptools', 'wheel'])
        print("‚úÖ pip, setuptools y wheel actualizados")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al actualizar pip/setuptools/wheel: {e}")
        return False

    print("üì¶ Instalando todas las dependencias desde requirements.txt (ra√≠z)...")
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        print("‚úÖ Todas las dependencias instaladas correctamente")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al instalar dependencias desde requirements.txt: {e}")
        print("Pasos recomendados para resolver el problema:\n 1) Usar conda/conda-forge (recomendado):\n    conda create -n sga python=3.12 -y; conda activate sga; conda install -c conda-forge streamlit pyarrow pandas openpyxl requests plotly -y\n 2) O instalar herramientas de compilaci√≥n en Windows y CMake (requiere reinicio y privilegios de administrador):\n    - Instala 'Visual Studio Build Tools' (C++), y 'CMake' (por ejemplo con winget o desde su web).\n 3) Luego reintenta: pip install -r requirements.txt")
        return False

def verificar_archivos():
    """Verifica que todos los archivos necesarios est√©n presentes"""
    archivos_requeridos = [
        'README.md',
        'requirements.txt',
        'modules/setup.py'
    ]
    
    print("üìÅ Verificando archivos del proyecto...")
    
    todos_presentes = True
    for archivo in archivos_requeridos:
        if os.path.exists(archivo):
            print(f"   ‚úÖ {archivo}")
        else:
            print(f"   ‚ùå {archivo} - FALTANTE")
            todos_presentes = False
    
    return todos_presentes

def verificar_json():
    """Verifica si hay archivos JSON de Slack disponibles"""
    archivos_json = list(Path('.').glob('*.json'))
    
    if archivos_json:
        print(f"üìÑ Archivos JSON encontrados:")
        for archivo in archivos_json:
            print(f"   ‚úÖ {archivo}")
        return archivos_json
    else:
        print("‚ö†Ô∏è  No se encontraron archivos JSON de Slack")
        print("   Aseg√∫rate de colocar tu archivo JSON exportado de Slack en este directorio")
        return []

def ejecutar_test():
    """Ejecuta un test b√°sico del extractor"""
    archivos_json = verificar_json()
    
    if not archivos_json:
        print("‚ö†Ô∏è  Sin archivos JSON para probar")
        return False
    
    # Usar el primer archivo JSON encontrado
    archivo_test = archivos_json[0]

def mostrar_resumen():
    """Muestra un resumen de c√≥mo usar el proyecto"""
    print("\n" + "="*60)
    print("üéâ CONFIGURACI√ìN COMPLETADA")
    print("="*60)
    
    print("\nüìö C√ìMO USAR EL PROYECTO:")
    print("\n1. Instala las dependencias:")
    print("   pip install -r requirements.txt")
    print("\n2. Lee README.md para la documentaci√≥n y ejemplos de uso.")

def main():
    """Funci√≥n principal del configurador"""
    print("‚öôÔ∏è  CONFIGURADOR AUTOM√ÅTICO - EXTRACTOR GITHUB-SLACK")
    print("="*60)
    
    # Verificaciones paso a paso
    pasos = [
        ("üêç Verificando Python", verificar_python),
        ("üì¶ Instalando dependencias", instalar_dependencias),
        ("üìÅ Verificando archivos", verificar_archivos),
        ("üß™ Ejecutando test", ejecutar_test)
    ]
    
    exito_total = True
    
    for nombre, funcion in pasos:
        print(f"\n{nombre}...")
        if not funcion():
            exito_total = False
            break
    
    if exito_total:
        mostrar_resumen()
    else:
        print("\n‚ùå Configuraci√≥n incompleta. Revisa los errores anteriores.")
        print("üí° Intenta ejecutar este script nuevamente despu√©s de resolver los problemas.")

if __name__ == "__main__":
    main()
